{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM35Feg/yqcWlwEp5K2+daP"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 01**"
      ],
      "metadata": {
        "id": "zLLHDtP3KtzI"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1YxS0KKyp4MD"
      },
      "outputs": [],
      "source": [
        "num1 = float(input('Insira o primeiro número: '))\n",
        "num2 = float(input('Insira o segundo número: '))\n",
        "\n",
        "sum = num1 + num2\n",
        "sub = num1 - num2\n",
        "mult = num1 * num2\n",
        "div = num1 / num2\n",
        "\n",
        "print(f' \\n Soma: {sum:.0f} \\n Subtração: {sub:.0f} \\n Multiplicação: {mult:.0f} \\n Divisão: {round(div,2)} \\n')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 02**"
      ],
      "metadata": {
        "id": "HgRvkMOzONDT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numMin = float(input('Insira uma quantidade de minutos para ser convertida: '))\n",
        "\n",
        "hora = numMin / 60\n",
        "min = numMin % 60\n",
        "\n",
        "print(f'\\n Conversão para Horas:{hora:.0f}:{min:.0f}h\\n')\n",
        "\n",
        "numHora = float(input('Insira uma quantidade de horas para ser convertida: '))\n",
        "\n",
        "min = numHora * 60\n",
        "\n",
        "print(f'\\n Conversão para Minutos:{min:.0f} min')"
      ],
      "metadata": {
        "id": "oOmerKezRVSG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 03**"
      ],
      "metadata": {
        "id": "Hl0FMxJjC4id"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "name1 = input('Digite um nome:')\n",
        "name2 = input('Digite outro nome:')\n",
        "\n",
        "listNames = list(name1 + name2)\n",
        "\n",
        "random.shuffle(listNames)\n",
        "\n",
        "mixedNames = ''.join(listNames).lower()\n",
        "\n",
        "print(f'Novo nome: {mixedNames}')"
      ],
      "metadata": {
        "id": "XLHCQJWgDHjF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 04**"
      ],
      "metadata": {
        "id": "clO_R6bUN_qQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n1 = float(input('\\nPrimeiro valor: '))\n",
        "n2 = float(input('Segundo valor: '))\n",
        "choice = int(input('\\nEscolha uma operação: \\n1=Soma \\n2=Subtração \\n3=Multiplicação \\n4=Divisão\\n'))\n",
        "\n",
        "sum = n1 + n2\n",
        "subt = n1 - n2\n",
        "div = n1 / n2\n",
        "mult = n1 * n2\n",
        "\n",
        "if choice==1:\n",
        "  print(f'\\n={sum:.0f}')\n",
        "elif choice==2:\n",
        "  print(f'\\n={subt:.0f}')\n",
        "elif choice==3:\n",
        "  print(f'\\n={mult:.0f}')\n",
        "elif choice==4:\n",
        "  print(f'\\n={div:.2f}')\n",
        "else:\n",
        "  print('\\nOperação inválida ... tente outra opção..')\n"
      ],
      "metadata": {
        "id": "0R0lQJcaN_W6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 05**"
      ],
      "metadata": {
        "id": "02qgUSddPcv8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "nome = list(input('Digite seu nome:'))\n",
        "sobrenome = list(input('\\nDigite seu sobrenome:'))\n",
        "\n",
        "random.shuffle(nome)\n",
        "random.shuffle(sobrenome)\n",
        "\n",
        "novoNome = ''.join(nome)\n",
        "novoSobrenome = ''.join(sobrenome)\n",
        "\n",
        "print(f'Saudações {novoNome} {novoSobrenome}')\n"
      ],
      "metadata": {
        "id": "O9k0pns6PiS3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 06**"
      ],
      "metadata": {
        "id": "iAyxjkBxgLZk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "numberRandom = random.randint(0,100)\n",
        "guess = int(input('Escolha um número entre 0 e 100: '))\n",
        "\n",
        "if numberRandom == guess:\n",
        "  print(f'Você acertou, número sorteado foi {numberRandom}')\n",
        "elif numberRandom > guess:\n",
        "  print(f'Hm, o palpite foi muito baixo, o sorteado da vez foi {numberRandom}')\n",
        "else:\n",
        "  print(f'Ohf, essa passou longe, muito alto, o sorteado foi {numberRandom}')"
      ],
      "metadata": {
        "id": "_NCJCZgXgObi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 07**"
      ],
      "metadata": {
        "id": "Hu_t3plPhliH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "peso = float(input('Digite seu peso: '))\n",
        "altura = float(input('Digite sua altura: '))\n",
        "\n",
        "IMC = peso / (altura**2)\n",
        "\n",
        "if IMC <= 18.5:\n",
        "  print(f'Abaixo do peso, IMC = {IMC:.2f}')\n",
        "elif IMC > 18.5 and IMC <= 24.9:\n",
        "  print(f'Peso normal, IMC = {IMC:.2f}')\n",
        "elif IMC > 24.9 and IMC <=29.9:\n",
        "  print(f'Sobrepeso, IMC = {IMC:.2f}')\n",
        "elif IMC > 29.9 and IMC <=34.9:\n",
        "  print(f'Obesidade I, IMC = {IMC:.2f}')\n",
        "elif IMC > 34.9 and IMC <=40:\n",
        "  print(f'Obesidade II, IMC = {IMC:.2f}')\n",
        "else:\n",
        "  print(f'Obesidade III, IMC = {IMC:.2f}')"
      ],
      "metadata": {
        "id": "bH7dPLk0ho9x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 08**"
      ],
      "metadata": {
        "id": "NwhJIZu-nhEJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "idade = int(input('Digite sua idade: '))\n",
        "\n",
        "if idade >= 18:\n",
        "  print('Maior de idade')\n",
        "else:\n",
        "  print('Menor de idade')"
      ],
      "metadata": {
        "id": "M1xuoifDnkCZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 09**"
      ],
      "metadata": {
        "id": "M3IDZRjTpxQf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "value = float(input('Digite o valor da compra: '))\n",
        "\n",
        "if value < 100:\n",
        "  discount = value * 0.95\n",
        "  print(f'\\nValor com desconto de 5% aplicado \\nTotal: {discount:.2f}')\n",
        "elif value >= 100 and value < 200:\n",
        "  discount = value * 0.9\n",
        "  print(f'\\nValor com desconto de 10% aplicado \\nTotal: {discount:.2f}')\n",
        "elif value >= 200 and value < 300:\n",
        "  discount = value * 0.8\n",
        "  print(f'\\nValor com desconto de 20% aplicado \\nTotal: {discount:.2f}')\n",
        "else:\n",
        "  discount = value * 0.7\n",
        "  print(f'\\nValor com desconto de 30% aplicado \\nTotal: {discount:.2f}')\n"
      ],
      "metadata": {
        "id": "x3vuw6Frpxs9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 10**"
      ],
      "metadata": {
        "id": "5N3UB-hasl0Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "acoes = ['correndo','nadando','saltando','pulando','andando','jogando','dirigindo','vigiando','cortando','acariciando']\n",
        "objetos = ['uma folha','uma panela','um cachorro','uma lampada','um videogame','um carro','um copo','um gato','um celular']\n",
        "lugares = ['na praia','na rua','na praça','na piscina','na cozinha','no quarto','na floresta','no parque','no vizinho','na árvore']\n",
        "pessoas = ['O menino','A menina','O idoso','O cachorro','A arara','O gato','O fantasma']\n",
        "\n",
        "pessoa = random.sample(pessoas, k=1)\n",
        "acao = random.sample(acoes, k=1)\n",
        "lugar = random.sample(lugares, k=1)\n",
        "objeto = random.sample(objetos, k=1)\n",
        "\n",
        "print(f'{pessoa} {acao} {lugar} com {objeto}')"
      ],
      "metadata": {
        "id": "x7rEuCe0srT8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 11**"
      ],
      "metadata": {
        "id": "tC2PxRw2sr2f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "dados = int(input('Digite a quantidade de dados a ser lançada: '))\n",
        "lados = int(input('Digite a quantidade de lados do dado: '))\n",
        "\n",
        "for _ in range(dados):\n",
        "  print(random.randint(0,lados))\n",
        "\n"
      ],
      "metadata": {
        "id": "fKkBAyP7ssQm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 12**"
      ],
      "metadata": {
        "id": "ttgyF3-6su9g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "palavra = input('Digite uma palavra: ')\n",
        "\n",
        "if len(palavra) <5:\n",
        "  print('Palavra muito curta')\n",
        "else:\n",
        "  print('Palavra muito longa')"
      ],
      "metadata": {
        "id": "c2YxaQ0nsxhz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 13**"
      ],
      "metadata": {
        "id": "tjkgkOW1syB0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "palavra = input('Insira uma palavraa qualquer: ')\n",
        "\n",
        "reverso = list(palavra)\n",
        "reverso.reverse()\n",
        "\n",
        "reverso = ''.join(reverso)\n",
        "\n",
        "if palavra == reverso:\n",
        "  print('A palavra é um palíndromo')\n",
        "else:\n",
        "  print('A palavra não é um palíndromo')"
      ],
      "metadata": {
        "id": "ypp3Aaqns1uL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 14**"
      ],
      "metadata": {
        "id": "7_Mzu7e6s2IB"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bVbaFSlns4R8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NÚMERO 15**"
      ],
      "metadata": {
        "id": "h8AnT00ss4p4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "R6gtFpIls7eW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}